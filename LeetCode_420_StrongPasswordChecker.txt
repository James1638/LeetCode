#Only 14.3% of submissions accepted as of 23 Jun 2020
#This is pretty inefficient. I used a BFS and tried to prune
#it appropriately. But given how few submissions were accepted,
#I'm glad I figured something out.
class Solution(object):
    def strongPasswordChecker(self, s):
        """
        :type s: str
        :rtype: int
        """
        def strength(s):
            if cft(s)>=0: return False
            if not(cfA(s)): return False
            if not(cfa(s)): return False
            if not(cf0(s)): return False
            if len(s)<6: return False
            if len(s)>20: return False
            return True
        
        def cft(s): #check for three in a row
            if len(s)>0: cur = s[0]
            streak =1
            for ii in range(1,len(s)):
                #print(cur, streak)
                if s[ii]==cur:
                    streak +=1
                else:
                    cur = s[ii]
                    streak = 1
                if streak==3: 
                    #print("returning ",ii-1)
                    return ii-1
            return -1

        def cf7(s): #check for 5 in a row
            if len(s)>0: cur = s[0]
            streak =1
            for ii in range(1,len(s)):
                #print(cur, streak)
                if s[ii]==cur:
                    streak +=1
                else:
                    cur = s[ii]
                    streak = 1
                if streak==7: 
                    #print("returning ",ii-1)
                    return ii-4
            return -1

        def cf6(s): #check for 5 in a row
            if len(s)>0: cur = s[0]
            streak =1
            for ii in range(1,len(s)):
                #print(cur, streak)
                if s[ii]==cur:
                    streak +=1
                else:
                    cur = s[ii]
                    streak = 1
                if streak==6: 
                    #print("returning ",ii-1)
                    return ii-3
            return -1

        def cf5(s): #check for 5 in a row
            if len(s)>0: cur = s[0]
            streak =1
            for ii in range(1,len(s)):
                #print(cur, streak)
                if s[ii]==cur:
                    streak +=1
                else:
                    cur = s[ii]
                    streak = 1
                if streak==5: 
                    #print("returning ",ii-1)
                    return ii-2
            return -1

        def cf4(s): #check for 4 in a row
            if len(s)>0: cur = s[0]
            streak =1
            for ii in range(1,len(s)):
                #print(cur, streak)
                if s[ii]==cur:
                    streak +=1
                else:
                    cur = s[ii]
                    streak = 1
                if streak==4: 
                    #print("returning ",ii-1)
                    return ii-2
            return -1

        def cfA(s): #check for at least one capital
            for ii in range(len(s)):
                if ord(s[ii])>=65 and ord(s[ii])<=90:
                    return True
            return False
        
        def cfa(s): #check for at least one lowercase
            for ii in range(len(s)):
                if ord(s[ii])>=97 and ord(s[ii])<=122:
                    return True
            return False
        
        def cf0(s): #check for at least one digis
            for ii in range(len(s)):
                if ord(s[ii])>=48 and ord(s[ii])<=57:
                    return True
            return False
        
        def twoA(s): #see if there are two uppercase
            thetwo=[]
            for ii in range(len(s)):
                if ord(s[ii])>=65 and ord(s[ii])<=90 and len(thetwo)<2:
                    thetwo.append(ii)
            return thetwo
        
        def twoa(s): #see if there are two lowercase
            thetwo=[]
            for ii in range(len(s)):
                if ord(s[ii])>=97 and ord(s[ii])<=122 and len(thetwo)<2:
                    thetwo.append(ii)
            return thetwo
        
        def two0(s): #see if there are two digits
            thetwo=[]
            for ii in range(len(s)):
                if ord(s[ii])>=48 and ord(s[ii])<=57 and len(thetwo)<2:
                    thetwo.append(ii)
            return thetwo
        
        lens = len(s)
        
        dist = 0
        if strength(s): return 0
        #return 5
        Q=[s]
        while Q:
            q=Q[:]
            Q=[]
            while q:
                a = q.pop(0)
                if dist>=13 and cf4(a)==-1: print(a, dist)
                print(a,dist)
                if strength(a): return dist
                toolong=0.  #if way too long, let's just get rid of some letters
                if len(a)>23: toolong = 1
                if toolong == 1: # let's just delete a bunch one by one until we're close
                    print(a, dist)
                    mo7 = cf7(a) #index of middle of 5 in a row
                    mo6 = cf6(a) #index of middle of 5 in a row
                    mo5 = cf5(a) #index of middle of 5 in a row
                    mo4 = cf4(a) #index of middle of 4 in a row
                    mot = cft(a) #index of middle of 3 in a row
                    if mo7>=0: 
                        #print(mo6)
                        newstr = a[:mo7]+'d'+a[mo6+3:] #delete one and change one
                        dist += 2
                        Q.append(newstr)
                    elif mo4>=0: 
                        Q.append(a[:mo4]+a[mo4+1:])
                    elif mot>=0: 
                        Q.append(a[:mot]+a[mot+1:])
                    elif cfA(a): # if at least one uppercase
                        tA = twoA(a)  #if two uppercase delete first
                        if len(tA)==2: Q.append(a[:tA[0]]+a[tA[0]+1:])
                    # are there at least two lowercase
                    elif cfa(a): # if at least one lowercase
                        ta = twoa(a)  #if two lowercase delete first
                        if len(ta)==2: Q.append(a[:ta[0]]+a[ta[0]+1:])
                    # are there at least two numerals
                    elif cf0(a): # if at least one numerals
                        t0 = two0(a)  #if two numerals delete first
                        if len(t0)==2: Q.append(a[:t0[0]]+a[t0[0]+1:])
                    
                mot = cft(a) #index of middle of three in a row
                if mot>=0 and toolong==0:
                    # check for five in a row. If exists, use that instead.
                    mot = max(cf5(a),mot)
                    #print("mot",mot)
                    chg = 0
                    if len(a) > 20: 
                        Q.append(a[:mot]+a[mot+1:]) #del mid of 3
                        chg += 1
                    if ord(a[mot])>=65 and ord(a[mot])<=90: 
                        Q.append(a[:mot]+'h'+a[mot+1:])
                        chg += 1
                    if ord(a[mot])>=97 and ord(a[mot])<=122: #Q.append(a[:mot]+'H'+a[mot+1:])
                        chg += 1
                        changed = 0
                        if not(cfA(a)): 
                            Q.append(a[:mot]+'H'+a[mot+1:])
                            changed += 1
                        if not(cf0(a)): 
                            Q.append(a[:mot]+'4'+a[mot+1:])
                            changed += 1
                        if changed == 0: Q.append(a[:mot]+'R'+a[mot+1:])
                    if ord(a[mot])>=48 and ord(a[mot])<=57: 
                        chg += 1
                        if not(cfA(a)): Q.append(a[:mot]+'H'+a[mot+1:])
                        if not(cfa(a)): Q.append(a[:mot]+'h'+a[mot+1:])
                    if chg==0:
                        Q.append(a[:mot]+'Y'+a[mot+1:])
                        Q.append(a[:mot]+'y'+a[mot+1:])
                        Q.append(a[:mot]+'2'+a[mot+1:])
                if len(a) < 6:
                    if mot >= 0: Q.append(a[:mot]+"x"+a[mot:])
                    Q.append(a+'m')
                    Q.append(a+'M')
                    Q.append(a+'6')
                if len(a)>20 and toolong==0:
                    # are there at least two uppercase
                    if cfA(a): # if at least one uppercase
                        tA = twoA(a)  #if two uppercase delete first
                        if len(tA)==2: Q.append(a[:tA[0]]+a[tA[0]+1:])
                    # are there at least two lowercase
                    if cfa(a): # if at least one lowercase
                        ta = twoa(a)  #if two lowercase delete first
                        if len(ta)==2: Q.append(a[:ta[0]]+a[ta[0]+1:])
                    # are there at least two numerals
                    if cf0(a): # if at least one numerals
                        t0 = two0(a)  #if two numerals delete first
                        if len(t0)==2: Q.append(a[:t0[0]]+a[t0[0]+1:])
                if not(cfa(a)) and toolong==0: 
                    tA = twoA(a)  #if two uppercase delete first
                    if len(tA)==2: Q.append(a[:tA[0]]+'t'+a[tA[0]+1:])
            dist += 1
        
        return dist

