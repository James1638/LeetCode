#Another Hard problem, with 30.2% acceptance as of 23 Jun 2020.
#Task: Given an unsorted integer array, find the smallest missing positive integer.
#This one I didn't think was all that difficult.
class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        def switch(a,b):
            #print(a,b)
            temp=nums[a]
            nums[a]=nums[b]
            nums[b]=temp
        
        if len(nums)==0: return 1
        if len(nums)==1:
            if nums[0]==1: return 2
            else: return 1
        if len(nums)==2:
            if nums[0]==1 and nums[1]==2: return 3
            elif nums[0]==2 and nums[1]==1: return 3
            elif nums[0]==1 or nums[1]==1: return 2
            else: return 1
        
        switchcount=0
        curlow=0
        curmax=len(nums)
        i=1
        while i-1 < curmax and switchcount<3*len(nums):
            #print(i, curmax, nums)
            if nums[i-1]!=i: 
                if nums[i-1]<i or nums[i-1]>=curmax:
                    #print("switch a")
                    switch(i-1,curmax-1)
                    curmax=curmax-1
                    switchcount=switchcount+1
                else:
                    #if nums[i-1]==nums[curmax-1]:
                        #curmax=curmax-1
                    if nums[i-1]==nums[nums[i-1]]:
                        #print("switch b")
                        switch(nums[i-1],curmax-1)
                        curmax=curmax-1
                        #switch(i-1,random.randint(i,curmax-1))
                    else:
                        #print("switch c")
                        switch(i-1,nums[i-1])
                    switchcount=switchcount+1
            else:
                i=i+1
            #print(i, curmax, nums)

        #print(i,nums)
        while i>=1 and i<=len(nums) and i==nums[i-1]: 
            i= i+1
        return i

